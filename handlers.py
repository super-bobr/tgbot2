from aiogram import Router, F
#–∏–º–ø—Ä–æ—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä(–±–∞–∑–æ–≤—ã–π –º–∞—Ä—à—É—Ç–∏—Ä–∏–∑–∞—Ç–æ—Ä) 
#–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã - –ø–æ–º–æ–≥–∞—é—Ç —É—Ç–æ—á–Ω–∏—Ç—å –∫–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –ª–æ–≤–∏—Ç—å 
from aiogram.types import Message, CallbackQuery
#–±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º 
import config, crypto, users
#–Ω–∞—à–∏ –º–æ–¥—É–ª–∏ 
from keyboards import main_menu
#–∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
import logging
#—á—Ç–æ–±—ã –±—ã–ª–æ –ª–µ–≥—á–µ –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å –æ—à–∏–±–∫–∏

logging.basicConfig(level=logging.INFO)
#–í–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ —É—Ä–æ–≤–Ω—è INFO –∏ –≤—ã—à–µ

router = Router()
#—Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º

@router.message(F.text == "/start")
#@router.message –ª–æ–≤–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–µ–≥–∞—Ä–∏—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
async def start_handler(msg: Message):
    #–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö —Ñ—É–Ω–∫—Ü–∏–∏ 
    await msg.answer("üí∞ –ö—Ä–∏–ø—Ç–æ–±–æ—Ç: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", reply_markup=main_menu())#–ø–∞—Ä–∞–º –ø—Ä–∏–∫–ª–µ–ø –∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    #–æ–±—ä—è–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–±—ä–∫—Ç–∞ Message –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ /start 

@router.callback_query(F.data == "price")
#–ª–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ —É –∫–Ω–æ–ø–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–∏—Å price
async def price_handler(query: CallbackQuery): #–æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
#–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö —Ñ—É–Ω–∫—Ü–∏–∏ 
    texts = []
    #–°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∫—É–¥–∞ –±—É–¥–µ–º —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å —Ü–µ–Ω–∞–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    for symbol in config.DEFAULT_CRYPTOS:
        #—Ü–∏–∫–ª –ø–µ—Ä–µ–±–æ—Ä–∞ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        try:
        #–Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –±—ã—Ç—å –º–æ–∂–µ—Ç binance –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç
            price = crypto.get_price(symbol)
            #–∏–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –Ω–∞ –Ω–∞—à—É –∫—Ä–∏–ø—Ç—É
            display_name = symbol.replace("USDT", "")
            #—É–±–∏—Ä–∞–µ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç—ã USDT - BTCUSDT ‚Üí BTC
            texts.append(f"{display_name}: {price:.2f} USD")
            #–æ–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ texts
        except Exception as e:
        #–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—É—é –æ—à–∏–±–∫—É
            logging.error(f"Price error for {symbol}: {str(e)}")
            #–∑–∞–ø–∏—Å—ã–≤–µ–º –Ω–∞—à—É –æ—à–∏–±–∫—É –≤ –ª–æ–≥–∏
            display_name = symbol.replace("USDT", "")
            texts.append(f"{display_name}: —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            #–µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–æ –≤—ã–≤–æ–¥–∏–º —Ç–∞–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ü–µ–Ω—ã
    
    await query.message.edit_text("üíµ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:\n" + "\n".join(texts), reply_markup=main_menu())
    #—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω—è—è –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ texts —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ 
    await query.answer()
    #–ì–æ–≤–æ—Ä–∏–º Telegram —á—Ç–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, –ø–æ–∑–≤–æ–ª—è—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É
    #–ë–µ–∑ —ç—Ç–æ–≥–æ –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç "–≤–∏—Å–µ—Ç—å" –≤ –Ω–∞–∂–∞—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@router.callback_query(F.data == "subscribe")
#–ª–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ —É –∫–Ω–æ–ø–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–∏—Å subscribe
async def subscribe_handler(query: CallbackQuery):
    #–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö —Ñ—É–Ω–∫—Ü–∏–∏ 
    chat_id = query.message.chat.id
    #–ø–æ–ª—É—á–∞–µ–º id —á–∞—Ç–∞
    if users.is_subscribed(chat_id):
        await query.message.edit_text("‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!", reply_markup=main_menu())
    else:
        users.subscribe(chat_id)
        await query.message.edit_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É!", reply_markup=main_menu())
    await query.answer()

@router.callback_query(F.data == "unsubscribe")
#–ª–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ —É –∫–Ω–æ–ø–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–∏—Å unsubscribe
async def unsubscribe_handler(query: CallbackQuery):
    chat_id = query.message.chat.id
    if not users.is_subscribed(chat_id):
        await query.message.edit_text("‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!", reply_markup=main_menu())
    else:
        users.unsubscribe(chat_id)
        await query.message.edit_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=main_menu())
    await query.answer()