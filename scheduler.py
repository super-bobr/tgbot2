from apscheduler.schedulers.asyncio import AsyncIOScheduler
#–∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é 
import config, crypto, users
#–Ω–∞—à–∏ –º–æ–¥—É–ª–∏ 
from aiogram import Bot
import asyncio
#–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö –∑–∞–¥–∞—á
from datetime import datetime
#–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
import logging
#—á—Ç–æ–±—ã –±—ã–ª–æ –ª–µ–≥—á–µ –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å –æ—à–∏–±–∫–∏

logging.basicConfig(level=logging.INFO)
#–í–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ —É—Ä–æ–≤–Ω—è INFO –∏ –≤—ã—à–µ

async def send_daily(bot: Bot):
    message = f"üíµ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ü–µ–Ω—ã ({datetime.now().strftime('%d.%m.%Y')}):\n"
    #–°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
    for sym in config.DEFAULT_CRYPTOS:
        #—Ü–∏–∫–ª –ø–µ—Ä–µ–±–æ—Ä–∞ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        try:
            price = crypto.get_price(sym)
            #–ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∫–∞–∂–¥–æ–π –∫—Ä–∏–ø—Ç—ã
            display_name = sym.replace("USDT", "")
            #—É–±–∏—Ä–∞–µ–º usdt –∏–∑ –Ω–∞–∑–≤–∞–Ω
            message += f"{display_name}: {price:.2f} USD\n"
            #–¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à—É —Å—Ç—Ä–æ–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ 
        except Exception as e:
            #–æ–±—ã—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            logging.error(f"Error processing {sym}: {str(e)}")\
            #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –ª–æ–≥–∏
            display_name = sym.replace("USDT", "")
            message += f"{display_name}: —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
    
    for user_id in users.get_all():
        #–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º 
        try:
            await bot.send_message(user_id, message)
            #–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
        except Exception as e:
        #–µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª
            logging.error(f"Error sending to {user_id}: {str(e)}")
            #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –ª–æ–≥–∏
def setup_scheduler(bot: Bot):
#–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ 
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
    scheduler.add_job(
        lambda: asyncio.create_task(send_daily(bot)),
        #lambda —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞—è —á—Ç–æ–±—ã –æ–±–µ—Ä–Ω—É—Ç—å –≤—ã–∑–æ–≤ –∏ –æ—Ç–ª–æ–∂–∏—Ç—å –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ,–±–µ–∑ –Ω–µ—ë —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
        trigger="cron", 
        hour=12,
        minute=0
        #–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    )
    scheduler.start()
    #–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ.